@startuml
'https://plantuml.com/class-diagram

package grpc {

    ManagedChannelBuilder --> ManagedChannel: instanciates

    class ManagedChannel
    class ManagedChannelBuilder

}

package kuksa {

    DataBrokerConnector -down-> DataBrokerConnection
    DataBrokerConnection -left-> VssPathListener
    DataBrokerConnection *-right- MultiListener
    MultiListener -right-> DisconnectListener
    TimeoutConfig -left-* DataBrokerConnector
    JsonWebToken -right-* DataBrokerConnector

    class DataBrokerConnector {
        + connect(): DataBrokerConnection
    }

    class TimeoutConfig {
        + timeout: Long
        + timeUnit: TimeUnit
    }

    class DataBrokerConnection {
        + jsonWebToken: JsonWebToken

        + disconnect()
    }

    class DataBrokerTransporterV1 {
        # jsonWebToken: JsonWebToken
        + fetch(String, Collection<Field>): GetResponse
        + update(String, Collection<Field>, Types.Datapoint): SetResponse
        + streamedUpdate(StreamObserver<...Response>): StreamObserver<...Request>
        + subscribe(String, Field): Subscription
    }

     class KuksaValV1Protocol {
        # jsonWebToken: JsonWebToken
        + fetch(FetchRequest): GetResponse
        + fetch<T : VssNode>(VssNodeFetchRequest<T>)
        + subscribe(SubscribeRequest, VssPathListener)
        + subscribe(SubscribeRequest): Flow<SubscribeResponse>
        + subscribe<T : VssNode>(VssNodeSubscribeRequest, VssNodeListener<T>)
        + update(UpdateRequest): SetResponse
        + update<T : VssNode>(request: VssNodeUpdateRequest<T>): VssNodeUpdateResponse
        + streamedUpdate(StreamObserver<...Response>): StreamObserver<...Request>
    }

     class DataBrokerTransporterV2 {
         # jsonWebToken: JsonWebToken
         + fetchValue(Types.SignalID): GetValueResponse
         + fetchValues(List<Types.SignalID>): GetValuesResponse
         + subscribeById(List<Int>, bufferSize: Int): Flow<SubscribeByIdResponse>
         + subscribe(List<String>, bufferSize: Int): Flow<SubscribeResponse>
         + actuate(Types.SignalID, value: Value): ActuateResponse
         + batchActuate(List<Types.SignalID>, value: Value): BatchActuateResponse
         + listMetadata(String, String): ListMetadataResponse
         + publishValue(Types.SignalID, Types.Datapoint): PublishValueResponse
         + openProviderStream(StreamObserver<...Response>): StreamObserver<...Request>
         + fetchServerInfo(): GetServerInfoResponse
     }

    class KuksaValV2Protocol {
        # jsonWebToken: JsonWebToken
        + fetchValue(FetchValueRequestV2): GetValueResponse
        + fetchValues(FetchValuesRequestV2): GetValuesResponse
        + subscribeById(SubscribeByIdRequestV2): Flow<SubscribeByIdResponse>
        + subscribe(SubscribeRequestV2): Flow<SubscribeResponse> {
        + actuate(ActuateRequestV2): ActuateResponse
        + batchActuate(BatchActuateRequestV2): BatchActuateResponse
        + listMetadata(ListMetadataRequestV2): ListMetadataResponse
        + publishValue(PublishValueRequestV2): PublishValueResponse
        + openProviderStream(StreamObserver<...Response>): StreamObserver<...Request>
        + fetchServerInfo(): GetServerInfoResponse
    }
    
    interface VssPathListener {
        + onEntryChanged(List<EntryUpdate>)
        + onError(Throwable)
    }



    class DataBrokerException

    abstract class MultiListener<T> {
        + register(T)
        + unregister(T)
    }

    interface DisconnectListener {
        + onDisconnect()
    }

    class JsonWebToken {
        + authScheme: String
        + token: String
    }
}

DataBrokerConnector -up-> ManagedChannel
DataBrokerConnection *-down- KuksaValV1Protocol
DataBrokerConnection *-down- KuksaValV2Protocol
KuksaValV1Protocol -down-> DataBrokerTransporterV1
KuksaValV2Protocol -down-> DataBrokerTransporterV2
DataBrokerTransporterV1 -down-> DataBrokerException: throws
DataBrokerTransporterV2 -down-> DataBrokerException: throws

@enduml
